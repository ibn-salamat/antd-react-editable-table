{"version":3,"sources":["components/EditableTable/formTypes.js","components/EditableTable/renderColumns.js","components/EditableTable/index.js","components/EditableTable/utils.js","App.js","index.js"],"names":["formTypes","renderColumns","columns","mode","forEach","column","i","current","children","dataIndex","formType","options","initialValue","width","rules","editable","newColumn","render","val","col","Item","name","key","disabled","style","renderColumn","CEditableTable","forwardRef","ref","propColumns","propData","data","loading","useForm","form","useState","setData","a","validateFields","newData","uid","getTableDatas","values","Object","keys","reduce","acc","separatorIndex","indexOf","id","substring","currentObj","find","el","push","parseFormValuesToArray","getFieldsValue","useImperativeHandle","getTableData","useEffect","Array","isArray","map","row","dataSource","sticky","className","scroll","x","pagination","onClick","Boolean","length","slice","testColumns","title","fixed","text","record","index","label","value","testData","age","city","flatNumber","houseNumber","street","App","tableRef","useRef","setLoading","Promise","setTimeout","padding","EditableTable","tableData","console","log","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e060c88.chunk.js","sourcesContent":["export const formTypes = {\n  text: \"text\",\n  number: \"number\",\n  select: \"select\",\n  datePicker: \"datePicker\",\n  rangePicker: \"rangePicker\",\n};\n","import React from \"react\";\nimport { Input, InputNumber, Select, Form } from \"antd\";\n\nimport { formTypes } from \"./formTypes\";\n\nexport function renderColumns(columns, mode) {\n  columns.forEach((column, i, current) => {\n    if (column.children) {\n      renderColumns(column.children, mode);\n    } else {\n      current[i] = renderColumn(column, mode);\n    }\n  });\n  return columns;\n}\n\nfunction renderColumn(column, mode) {\n  const {\n    dataIndex,\n    formType,\n    options,\n    initialValue,\n    width,\n    rules = [],\n    editable,\n  } = column;\n\n  let newColumn = column;\n\n  switch (formType) {\n    case formTypes.text:\n      newColumn = {\n        ...column,\n        render: (val, col) => {\n          return (\n            <Form.Item\n              initialValue={val || initialValue}\n              name={`${col.key}__${dataIndex}`}\n              rules={rules}\n            >\n              <Input\n                disabled={mode === \"view\" || !editable}\n                style={{ width }}\n                // onChange={e => {\n                //   console.log(e);\n                // }}\n              />\n            </Form.Item>\n          );\n        },\n      };\n      break;\n    case formTypes.number:\n      newColumn = {\n        ...column,\n        render: (val, col) => {\n          return (\n            <Form.Item\n              initialValue={val || initialValue}\n              name={`${col.key}__${dataIndex}`}\n              rules={rules}\n            >\n              <InputNumber\n                disabled={mode === \"view\" || !editable}\n                style={{ width }}\n              />\n            </Form.Item>\n          );\n        },\n      };\n      break;\n    case formTypes.select:\n      newColumn = {\n        ...column,\n        render: (val, col) => {\n          return (\n            <Form.Item\n              initialValue={val || initialValue}\n              name={`${col.key}__${dataIndex}`}\n              rules={rules}\n            >\n              <Select\n                disabled={mode === \"view\" || !editable}\n                options={options}\n                style={{ width }}\n              />\n            </Form.Item>\n          );\n        },\n      };\n      break;\n    default:\n      break;\n  }\n\n  return newColumn;\n}\n","/* eslint-disable camelcase */\nimport React, {\n  useEffect,\n  useState,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\nimport { Form, Table, Button } from \"antd\";\nimport { useForm } from \"antd/lib/form/Form\";\nimport { uid } from \"uid\";\n\nimport { renderColumns } from \"./renderColumns\";\n\nfunction parseFormValuesToArray(values) {\n  const tableData = Object.keys(values).reduce((acc = [], key) => {\n    const separatorIndex = key.indexOf(\"__\");\n    const id = key.substring(0, separatorIndex);\n    const name = key.substring(separatorIndex + 2);\n\n    const currentObj = acc.find((el) => el.id === id);\n    if (!currentObj) {\n      acc.push({ id, [name]: values[key] });\n    } else {\n      currentObj[name] = values[key];\n    }\n\n    return acc;\n  }, []);\n\n  return tableData;\n}\n\nconst CEditableTable = forwardRef(\n  ({ columns: propColumns, data: propData, loading, mode }, ref) => {\n    const [form] = useForm();\n    const [data, setData] = useState([]);\n    const [columns] = useState(renderColumns([...propColumns], mode));\n\n    async function addRow() {\n      await form.validateFields();\n\n      const newData = {\n        key: uid(),\n      };\n\n      columns.forEach((column) => {\n        const { dataIndex, initialValue = null } = column;\n\n        newData[dataIndex] = initialValue;\n      });\n\n      setData([...data, newData]);\n    }\n\n    function deleteRow() {\n      setData(data.slice(0, data.length - 1));\n    }\n\n    function getTableDatas() {\n      const values = form.getFieldsValue();\n\n      const tableData = parseFormValuesToArray(values);\n\n      return tableData;\n    }\n\n    //\n    useImperativeHandle(ref, () => ({\n      getTableData() {\n        return getTableDatas();\n      },\n    }));\n\n    // change data\n    useEffect(() => {\n      if (!Array.isArray(propData)) return;\n\n      setData(\n        propData.map((row) => {\n          return {\n            ...row,\n            key: uid(),\n          };\n        })\n      );\n    }, [propData]);\n\n    return (\n      <>\n        <Form form={form}>\n          <Table\n            loading={loading}\n            id=\"custom-antd-editable-table\"\n            columns={columns}\n            dataSource={data}\n            sticky\n            className=\"custom-antd-editable-table\"\n            scroll={{ x: \"max-content\" }}\n            pagination={false}\n          />\n        </Form>\n\n        <br />\n\n        {mode !== \"view\" && (\n          <>\n            <Button onClick={addRow}>add</Button>\n            {Boolean(data.length) && (\n              <Button onClick={deleteRow}>delete</Button>\n            )}\n          </>\n        )}\n      </>\n    );\n  }\n);\n\nexport default CEditableTable;\n","import { formTypes } from \"./formTypes\";\n\nexport const testColumns = [\n  {\n    title: \"№\",\n    key: \"index\",\n    width: 70,\n    fixed: \"left\",\n    render: (text, record, index) => {\n      // eslint-disable-next-line react/destructuring-assignment\n      // (component.state.currentPage - 1) * component.state.pageSize + index + 1,\n      return index + 1;\n    },\n  },\n  {\n    key: \"name\",\n    title: \"Name\",\n    dataIndex: \"name\",\n    formType: formTypes.text,\n    width: 120,\n    initialValue: \"Al\",\n    editable: true,\n    // rules: [\n    //   {\n    //     required: true,\n    //     message: \"required\",\n    //   },\n    // ],\n  },\n  {\n    key: \"age\",\n    title: \"Age\",\n    dataIndex: \"age\",\n    formType: formTypes.number,\n    width: 120,\n    editable: true,\n  },\n  {\n    key: \"adressInfo\",\n    title: \"Adress info\",\n    children: [\n      {\n        key: \"houseInfo\",\n        title: \"House info\",\n        children: [\n          {\n            key: \"houseNumber\",\n            title: \"House number\",\n            dataIndex: \"houseNumber\",\n            formType: formTypes.number,\n            width: 120,\n            editable: true,\n          },\n          {\n            key: \"flatNumber\",\n            title: \"Flat number\",\n            dataIndex: \"flatNumber\",\n            formType: formTypes.number,\n            width: 120,\n            editable: true,\n          },\n        ],\n      },\n      {\n        key: \"city\",\n        title: \"City\",\n        dataIndex: \"city\",\n        formType: formTypes.select,\n        options: [\n          { label: \"Atyrau\", value: \"atyrau_06\" },\n          { label: \"Almaty\", value: \"almaty_02\" },\n        ],\n        initialValue: \"atyrau_06\",\n        width: 120,\n        editable: true,\n\n        // rules: [\n        //   {\n        //     required: true,\n        //     message: \"required\",\n        //   },\n        // ],\n      },\n      {\n        key: \"street\",\n        title: \"Street\",\n        dataIndex: \"street\",\n        formType: formTypes.text,\n        width: 120,\n        // rules: [\n        //   {\n        //     required: true,\n        //     message: \"required\",\n        //   },\n        //   {\n        //     len: 2,\n        //     message: \"min 2\",\n        //   },\n        // ],\n        editable: true,\n      },\n    ],\n  },\n];\n\nexport const testData = [\n  {\n    age: 55,\n    city: \"atyrau_06\",\n    flatNumber: 5454,\n    houseNumber: 5454,\n    name: \"Al\",\n    street: \"465464\",\n  },\n  {\n    age: 654841,\n    city: \"almaty_02\",\n    flatNumber: 646445,\n    houseNumber: 4186416541,\n    name: \"Aldssdf\",\n    street: \"68465\",\n  },\n];\n","import { useEffect, useState, useRef } from \"react\";\nimport { Divider, Button } from \"antd\";\n\nimport EditableTable from \"./components/EditableTable\";\nimport { testColumns, testData } from \"./components/EditableTable/utils\";\n\nfunction App() {\n  const tableRef = useRef();\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState([]);\n\n  function getData() {\n    setLoading(true);\n    new Promise(() => {\n      setTimeout(() => {\n        setData(testData);\n        setLoading(false);\n      }, 1500);\n    });\n  }\n\n  function getTableData() {\n    const tableData = tableRef.current.getTableData();\n\n    console.log(tableData);\n  }\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  return (\n    <>\n      <div style={{ padding: \"10px 15px\" }}>\n        <br />\n        <h1>Edit mode</h1>\n        <EditableTable columns={testColumns} ref={tableRef} />\n        <Button onClick={getTableData}>Get data</Button>\n      </div>\n\n      <Divider />\n      <div style={{ padding: \"10px 15px\" }}>\n        <h1>View mode with props data</h1>\n        <EditableTable\n          columns={testColumns}\n          data={data}\n          loading={loading}\n          mode=\"view\"\n        />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}